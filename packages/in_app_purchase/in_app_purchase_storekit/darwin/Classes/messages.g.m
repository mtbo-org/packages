// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v16.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation SKPaymentTransactionStateMessageBox
- (instancetype)initWithValue:(SKPaymentTransactionStateMessage)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface SKPaymentTransactionMessage ()
+ (SKPaymentTransactionMessage *)fromList:(NSArray *)list;
+ (nullable SKPaymentTransactionMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SKPaymentMessage ()
+ (SKPaymentMessage *)fromList:(NSArray *)list;
+ (nullable SKPaymentMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SKErrorMessage ()
+ (SKErrorMessage *)fromList:(NSArray *)list;
+ (nullable SKErrorMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SKPaymentDiscountMessage ()
+ (SKPaymentDiscountMessage *)fromList:(NSArray *)list;
+ (nullable SKPaymentDiscountMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface SKStorefrontMessage ()
+ (SKStorefrontMessage *)fromList:(NSArray *)list;
+ (nullable SKStorefrontMessage *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation SKPaymentTransactionMessage
+ (instancetype)makeWithPayment:(SKPaymentMessage *)payment
               transactionState:(SKPaymentTransactionStateMessage)transactionState
            originalTransaction:(nullable SKPaymentTransactionMessage *)originalTransaction
           transactionTimeStamp:(nullable NSNumber *)transactionTimeStamp
          transactionIdentifier:(nullable NSString *)transactionIdentifier
                          error:(nullable SKErrorMessage *)error {
  SKPaymentTransactionMessage *pigeonResult = [[SKPaymentTransactionMessage alloc] init];
  pigeonResult.payment = payment;
  pigeonResult.transactionState = transactionState;
  pigeonResult.originalTransaction = originalTransaction;
  pigeonResult.transactionTimeStamp = transactionTimeStamp;
  pigeonResult.transactionIdentifier = transactionIdentifier;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (SKPaymentTransactionMessage *)fromList:(NSArray *)list {
  SKPaymentTransactionMessage *pigeonResult = [[SKPaymentTransactionMessage alloc] init];
  pigeonResult.payment = [SKPaymentMessage nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.transactionState = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.originalTransaction =
      [SKPaymentTransactionMessage nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  pigeonResult.transactionTimeStamp = GetNullableObjectAtIndex(list, 3);
  pigeonResult.transactionIdentifier = GetNullableObjectAtIndex(list, 4);
  pigeonResult.error = [SKErrorMessage nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  return pigeonResult;
}
+ (nullable SKPaymentTransactionMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SKPaymentTransactionMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.payment ? [self.payment toList] : [NSNull null]),
    @(self.transactionState),
    (self.originalTransaction ? [self.originalTransaction toList] : [NSNull null]),
    self.transactionTimeStamp ?: [NSNull null],
    self.transactionIdentifier ?: [NSNull null],
    (self.error ? [self.error toList] : [NSNull null]),
  ];
}
@end

@implementation SKPaymentMessage
+ (instancetype)makeWithProductIdentifier:(NSString *)productIdentifier
                      applicationUsername:(nullable NSString *)applicationUsername
                              requestData:(nullable NSString *)requestData
                                 quantity:(NSInteger)quantity
               simulatesAskToBuyInSandbox:(BOOL)simulatesAskToBuyInSandbox
                          paymentDiscount:(nullable SKPaymentDiscountMessage *)paymentDiscount {
  SKPaymentMessage *pigeonResult = [[SKPaymentMessage alloc] init];
  pigeonResult.productIdentifier = productIdentifier;
  pigeonResult.applicationUsername = applicationUsername;
  pigeonResult.requestData = requestData;
  pigeonResult.quantity = quantity;
  pigeonResult.simulatesAskToBuyInSandbox = simulatesAskToBuyInSandbox;
  pigeonResult.paymentDiscount = paymentDiscount;
  return pigeonResult;
}
+ (SKPaymentMessage *)fromList:(NSArray *)list {
  SKPaymentMessage *pigeonResult = [[SKPaymentMessage alloc] init];
  pigeonResult.productIdentifier = GetNullableObjectAtIndex(list, 0);
  pigeonResult.applicationUsername = GetNullableObjectAtIndex(list, 1);
  pigeonResult.requestData = GetNullableObjectAtIndex(list, 2);
  pigeonResult.quantity = [GetNullableObjectAtIndex(list, 3) integerValue];
  pigeonResult.simulatesAskToBuyInSandbox = [GetNullableObjectAtIndex(list, 4) boolValue];
  pigeonResult.paymentDiscount =
      [SKPaymentDiscountMessage nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  return pigeonResult;
}
+ (nullable SKPaymentMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SKPaymentMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.productIdentifier ?: [NSNull null],
    self.applicationUsername ?: [NSNull null],
    self.requestData ?: [NSNull null],
    @(self.quantity),
    @(self.simulatesAskToBuyInSandbox),
    (self.paymentDiscount ? [self.paymentDiscount toList] : [NSNull null]),
  ];
}
@end

@implementation SKErrorMessage
+ (instancetype)makeWithCode:(NSInteger)code
                      domain:(NSString *)domain
                    userInfo:(NSDictionary<NSString *, id> *)userInfo {
  SKErrorMessage *pigeonResult = [[SKErrorMessage alloc] init];
  pigeonResult.code = code;
  pigeonResult.domain = domain;
  pigeonResult.userInfo = userInfo;
  return pigeonResult;
}
+ (SKErrorMessage *)fromList:(NSArray *)list {
  SKErrorMessage *pigeonResult = [[SKErrorMessage alloc] init];
  pigeonResult.code = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.domain = GetNullableObjectAtIndex(list, 1);
  pigeonResult.userInfo = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable SKErrorMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SKErrorMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.code),
    self.domain ?: [NSNull null],
    self.userInfo ?: [NSNull null],
  ];
}
@end

@implementation SKPaymentDiscountMessage
+ (instancetype)makeWithIdentifier:(NSString *)identifier
                     keyIdentifier:(NSString *)keyIdentifier
                             nonce:(NSString *)nonce
                         signature:(NSString *)signature
                         timestamp:(NSInteger)timestamp {
  SKPaymentDiscountMessage *pigeonResult = [[SKPaymentDiscountMessage alloc] init];
  pigeonResult.identifier = identifier;
  pigeonResult.keyIdentifier = keyIdentifier;
  pigeonResult.nonce = nonce;
  pigeonResult.signature = signature;
  pigeonResult.timestamp = timestamp;
  return pigeonResult;
}
+ (SKPaymentDiscountMessage *)fromList:(NSArray *)list {
  SKPaymentDiscountMessage *pigeonResult = [[SKPaymentDiscountMessage alloc] init];
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 0);
  pigeonResult.keyIdentifier = GetNullableObjectAtIndex(list, 1);
  pigeonResult.nonce = GetNullableObjectAtIndex(list, 2);
  pigeonResult.signature = GetNullableObjectAtIndex(list, 3);
  pigeonResult.timestamp = [GetNullableObjectAtIndex(list, 4) integerValue];
  return pigeonResult;
}
+ (nullable SKPaymentDiscountMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SKPaymentDiscountMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.identifier ?: [NSNull null],
    self.keyIdentifier ?: [NSNull null],
    self.nonce ?: [NSNull null],
    self.signature ?: [NSNull null],
    @(self.timestamp),
  ];
}
@end

@implementation SKStorefrontMessage
+ (instancetype)makeWithCountryCode:(NSString *)countryCode identifier:(NSString *)identifier {
  SKStorefrontMessage *pigeonResult = [[SKStorefrontMessage alloc] init];
  pigeonResult.countryCode = countryCode;
  pigeonResult.identifier = identifier;
  return pigeonResult;
}
+ (SKStorefrontMessage *)fromList:(NSArray *)list {
  SKStorefrontMessage *pigeonResult = [[SKStorefrontMessage alloc] init];
  pigeonResult.countryCode = GetNullableObjectAtIndex(list, 0);
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable SKStorefrontMessage *)nullableFromList:(NSArray *)list {
  return (list) ? [SKStorefrontMessage fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    self.countryCode ?: [NSNull null],
    self.identifier ?: [NSNull null],
  ];
}
@end

@interface InAppPurchaseAPICodecReader : FlutterStandardReader
@end
@implementation InAppPurchaseAPICodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [SKErrorMessage fromList:[self readValue]];
    case 129:
      return [SKPaymentDiscountMessage fromList:[self readValue]];
    case 130:
      return [SKPaymentMessage fromList:[self readValue]];
    case 131:
      return [SKPaymentTransactionMessage fromList:[self readValue]];
    case 132:
      return [SKStorefrontMessage fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface InAppPurchaseAPICodecWriter : FlutterStandardWriter
@end
@implementation InAppPurchaseAPICodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[SKErrorMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPaymentDiscountMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPaymentMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKPaymentTransactionMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[SKStorefrontMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface InAppPurchaseAPICodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation InAppPurchaseAPICodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[InAppPurchaseAPICodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[InAppPurchaseAPICodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *InAppPurchaseAPIGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    InAppPurchaseAPICodecReaderWriter *readerWriter =
        [[InAppPurchaseAPICodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void SetUpInAppPurchaseAPI(id<FlutterBinaryMessenger> binaryMessenger,
                           NSObject<InAppPurchaseAPI> *api) {
  /// Returns if the current device is able to make payments
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               @"dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.canMakePayments"
        binaryMessenger:binaryMessenger
                  codec:InAppPurchaseAPIGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(canMakePaymentsWithError:)],
          @"InAppPurchaseAPI api (%@) doesn't respond to @selector(canMakePaymentsWithError:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api canMakePaymentsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.transactions"
        binaryMessenger:binaryMessenger
                  codec:InAppPurchaseAPIGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(transactionsWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to @selector(transactionsWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSArray<SKPaymentTransactionMessage *> *output = [api transactionsWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.storefront"
        binaryMessenger:binaryMessenger
                  codec:InAppPurchaseAPIGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(storefrontWithError:)],
                @"InAppPurchaseAPI api (%@) doesn't respond to @selector(storefrontWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        SKStorefrontMessage *output = [api storefrontWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.addPayment"
        binaryMessenger:binaryMessenger
                  codec:InAppPurchaseAPIGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(addPaymentPaymentMap:error:)],
          @"InAppPurchaseAPI api (%@) doesn't respond to @selector(addPaymentPaymentMap:error:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_paymentMap = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addPaymentPaymentMap:arg_paymentMap error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
