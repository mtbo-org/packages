// Autogenerated from Pigeon (v16.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum SKPaymentTransactionStateMessage {
  /// Indicates the transaction is being processed in App Store.
  ///
  /// You should update your UI to indicate that you are waiting for the
  /// transaction to update to another state. Never complete a transaction that
  /// is still in a purchasing state.
  purchasing,

  /// The user's payment has been succesfully processed.
  ///
  /// You should provide the user the content that they purchased.
  purchased,

  /// The transaction failed.
  ///
  /// Check the [PaymentTransactionWrapper.error] property from
  /// [PaymentTransactionWrapper] for details.
  failed,

  /// This transaction is restoring content previously purchased by the user.
  ///
  /// The previous transaction information can be obtained in
  /// [PaymentTransactionWrapper.originalTransaction] from
  /// [PaymentTransactionWrapper].
  restored,

  /// The transaction is in the queue but pending external action. Wait for
  /// another callback to get the final state.
  ///
  /// You should update your UI to indicate that you are waiting for the
  /// transaction to update to another state.
  deferred,

  /// Indicates the transaction is in an unspecified state.
  unspecified,
}

class SKPaymentTransactionMessage {
  SKPaymentTransactionMessage({
    required this.payment,
    required this.transactionState,
    this.originalTransaction,
    this.transactionTimeStamp,
    this.transactionIdentifier,
    this.error,
  });

  SKPaymentMessage payment;

  SKPaymentTransactionStateMessage transactionState;

  SKPaymentTransactionMessage? originalTransaction;

  double? transactionTimeStamp;

  String? transactionIdentifier;

  SKErrorMessage? error;

  Object encode() {
    return <Object?>[
      payment.encode(),
      transactionState.index,
      originalTransaction?.encode(),
      transactionTimeStamp,
      transactionIdentifier,
      error?.encode(),
    ];
  }

  static SKPaymentTransactionMessage decode(Object result) {
    result as List<Object?>;
    return SKPaymentTransactionMessage(
      payment: SKPaymentMessage.decode(result[0]! as List<Object?>),
      transactionState:
          SKPaymentTransactionStateMessage.values[result[1]! as int],
      originalTransaction: result[2] != null
          ? SKPaymentTransactionMessage.decode(result[2]! as List<Object?>)
          : null,
      transactionTimeStamp: result[3] as double?,
      transactionIdentifier: result[4] as String?,
      error: result[5] != null
          ? SKErrorMessage.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class SKPaymentMessage {
  SKPaymentMessage({
    required this.productIdentifier,
    this.applicationUsername,
    this.requestData,
    this.quantity = 1,
    this.simulatesAskToBuyInSandbox = false,
    this.paymentDiscount,
  });

  String productIdentifier;

  String? applicationUsername;

  String? requestData;

  int quantity;

  bool simulatesAskToBuyInSandbox;

  SKPaymentDiscountMessage? paymentDiscount;

  Object encode() {
    return <Object?>[
      productIdentifier,
      applicationUsername,
      requestData,
      quantity,
      simulatesAskToBuyInSandbox,
      paymentDiscount?.encode(),
    ];
  }

  static SKPaymentMessage decode(Object result) {
    result as List<Object?>;
    return SKPaymentMessage(
      productIdentifier: result[0]! as String,
      applicationUsername: result[1] as String?,
      requestData: result[2] as String?,
      quantity: result[3]! as int,
      simulatesAskToBuyInSandbox: result[4]! as bool,
      paymentDiscount: result[5] != null
          ? SKPaymentDiscountMessage.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class SKErrorMessage {
  SKErrorMessage({
    required this.code,
    required this.domain,
    required this.userInfo,
  });

  int code;

  String domain;

  Map<String?, Object?> userInfo;

  Object encode() {
    return <Object?>[
      code,
      domain,
      userInfo,
    ];
  }

  static SKErrorMessage decode(Object result) {
    result as List<Object?>;
    return SKErrorMessage(
      code: result[0]! as int,
      domain: result[1]! as String,
      userInfo: (result[2] as Map<Object?, Object?>?)!.cast<String?, Object?>(),
    );
  }
}

class SKPaymentDiscountMessage {
  SKPaymentDiscountMessage({
    required this.identifier,
    required this.keyIdentifier,
    required this.nonce,
    required this.signature,
    required this.timestamp,
  });

  String identifier;

  String keyIdentifier;

  String nonce;

  String signature;

  int timestamp;

  Object encode() {
    return <Object?>[
      identifier,
      keyIdentifier,
      nonce,
      signature,
      timestamp,
    ];
  }

  static SKPaymentDiscountMessage decode(Object result) {
    result as List<Object?>;
    return SKPaymentDiscountMessage(
      identifier: result[0]! as String,
      keyIdentifier: result[1]! as String,
      nonce: result[2]! as String,
      signature: result[3]! as String,
      timestamp: result[4]! as int,
    );
  }
}

class SKStorefrontMessage {
  SKStorefrontMessage({
    required this.countryCode,
    required this.identifier,
  });

  String countryCode;

  String identifier;

  Object encode() {
    return <Object?>[
      countryCode,
      identifier,
    ];
  }

  static SKStorefrontMessage decode(Object result) {
    result as List<Object?>;
    return SKStorefrontMessage(
      countryCode: result[0]! as String,
      identifier: result[1]! as String,
    );
  }
}

class _InAppPurchaseAPICodec extends StandardMessageCodec {
  const _InAppPurchaseAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SKErrorMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is SKPaymentDiscountMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is SKPaymentMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is SKPaymentTransactionMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is SKStorefrontMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return SKErrorMessage.decode(readValue(buffer)!);
      case 129:
        return SKPaymentDiscountMessage.decode(readValue(buffer)!);
      case 130:
        return SKPaymentMessage.decode(readValue(buffer)!);
      case 131:
        return SKPaymentTransactionMessage.decode(readValue(buffer)!);
      case 132:
        return SKStorefrontMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class InAppPurchaseAPI {
  /// Constructor for [InAppPurchaseAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  InAppPurchaseAPI({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec =
      _InAppPurchaseAPICodec();

  /// Returns if the current device is able to make payments
  Future<bool> canMakePayments() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.canMakePayments';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<List<SKPaymentTransactionMessage?>> transactions() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.transactions';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!
          .cast<SKPaymentTransactionMessage?>();
    }
  }

  Future<SKStorefrontMessage> storefront() async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.storefront';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SKStorefrontMessage?)!;
    }
  }

  Future<void> addPayment(Map<String?, Object?> paymentMap) async {
    const String __pigeon_channelName =
        'dev.flutter.pigeon.in_app_purchase_storekit.InAppPurchaseAPI.addPayment';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[paymentMap]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
